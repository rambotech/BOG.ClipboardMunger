<?xml version="1.0"?>
<ClipboardMungerScriptContainer xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Title>CSharp Class Fill out (StyleCop)</Title>
  <Description>Takes a skeleton class in CSharp which has only properties, and builds a public class with instantiaion, and get/set methods for each property.

The class can contain implementation/inheritance, and can have one or more attributes prefixed to a property. See the test tab for an example.</Description>
  <Script>// Take a simple CSharp class sample, with only property values, and make a public
// class form it with get/set methods for each property, where the get/set method
// uses the property's original name, and stores in a local variable named using an
// underscore prefix on the original name.
//
// This output format attempts to conform to standard StyleCop analysis.
//
// E.g.
// class MyClass : ICloneable
// {
//   int Sequence;
//   string[] DisplayItems;
//   // [[NO CLONE]]
//   OtherClass.Special x;
// }
//
// NOTE: This builder looks for ICloneable and ISerializable and adds methods
// Clone() and GetObjectData() methods, respectively, when present.

using System;
using System.Text;
using System.Collections.Generic;
using System.Collections.Specialized;

public class Script : Interfaces.IClipboard
{
    private string LowerCaseFirstLetter(string original)
    {
        return original.Length == 0 ? original : (
            original.Length == 1 ?
                original.Substring(0, 1).ToLower() : original.Substring(0, 1).ToLower() + original.Substring(1));
    }

    public string Munge(string clipboardSource)
    {
        StringBuilder output = new StringBuilder();
        Dictionary&lt;int, string[]&gt; Property = new Dictionary&lt;int, string[]&gt;();
        StringDictionary Attribute = new StringDictionary();
        List&lt;string&gt; AttributeHolder = new List&lt;string&gt;();
        List&lt;string&gt; ClassAttributeHolder = new List&lt;string&gt;();

        Dictionary&lt;string, List&lt;string&gt;&gt; EnumHolder = new Dictionary&lt;string, List&lt;string&gt;&gt;();
        Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;&gt; EnumCollection = new Dictionary&lt;string, Dictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;&gt;();

        string thisEnumKey = string.Empty;
        bool InDefinitions = false;
        bool InEnumDef = false;
        bool CodeGenerationCompleted = false;

        bool IncludeCloneMethod = false;
        bool IncludeGetObjectDataMethod = false;
        string ClassName = string.Empty;
        string ClassImplements = string.Empty;

        Queue&lt;string&gt; Lines = new Queue&lt;string&gt;(clipboardSource.Split(new string[] { "\r\n" }, StringSplitOptions.None));
        Queue&lt;string&gt; ExtraLines = new Queue&lt;string&gt;();
        string l = string.Empty;
        string s = string.Empty;
        while (Lines.Count &gt; 0 || ExtraLines.Count &gt; 0)
        {
            if (ExtraLines.Count &gt; 0)
            {
                s = ExtraLines.Dequeue();
            }
            else
            {
                s = Lines.Dequeue();
            }
            l = s;

            // trim right
            while (s.Length &gt; 0 &amp;&amp; (s[s.Length - 1] == ' ' || s[s.Length - 1] == '\t'))
                s = s.Length == 1 ? string.Empty : s.Substring(0, s.Length - 1);

            if (CodeGenerationCompleted) // this is user code which we append to the end of the class.
            {
                output.Append("\t");
                output.AppendLine(s);
                continue;
            }

            // trim left
            while (s.Length &gt; 0 &amp;&amp; (s[0] == ' ' || s[0] == '\t'))
                s = s.Length == 1 ? string.Empty : s.Substring(1);

            if (!InDefinitions &amp;&amp; s.Length &gt; 2 &amp;&amp; s.IndexOf("[") == 0 &amp;&amp; s.LastIndexOf("]") == s.Length - 1)
            {
                if (InEnumDef)
                {
                    if (!EnumHolder.ContainsKey("Attribute"))
                    {
                        EnumHolder.Add("Attribute", new List&lt;string&gt;());
                    }
                    EnumHolder["Attribute"].Add(s);
                }
                else
                {
                    ClassAttributeHolder.Add(s);
                }
            }
            else if (!InDefinitions &amp;&amp; s.IndexOf("class ") == 0)
            {
                foreach (string attribute in ClassAttributeHolder)
                {
                    output.AppendLine(attribute);
                }
                output.AppendLine(string.Format("public {0}", s));
                ClassName = s.Substring(5).Trim();
                if (ClassName.IndexOf(':') &gt;= 0)
                {
                    if (ClassName.Length - 1 &gt; ClassName.IndexOf(':'))
                    {
                        ClassImplements = ClassName.Substring(ClassName.IndexOf(':') + 1).Trim();
                        IncludeCloneMethod = ClassImplements.Contains("ICloneable");
                        IncludeGetObjectDataMethod = ClassImplements.Contains("ISerializable");
                    }
                    ClassName = ClassName.Substring(0, ClassName.IndexOf(':')).Trim();
                }
            }
            else if (s.ToLower().IndexOf("public enum ") == 0)
            {
                InEnumDef = true;
                thisEnumKey = s;
				EnumHolder = new Dictionary&lt;string, List&lt;string&gt;&gt;();
            }
            else if (s.Substring(0) == "{")
            {
            	if (InEnumDef)
            	{
            		
            	}
                else if (!InDefinitions)
                {
                    InDefinitions = true;
                    output.AppendLine(s);
                }
            }
            else if (s.Substring(0) == "}" &amp;&amp; InEnumDef)
            {
                InEnumDef = false;
                thisEnumKey = string.Empty;
            }
            else if (s.Substring(0) == "}")
            {
                // Create the default instantiation method
                output.AppendLine();
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine(string.Format("\t/// Initializes a new instance of the &lt;see cref=\"{0}\"/&gt; class.", ClassName));
                output.AppendLine("\t/// &lt;/summary&gt;");
                output.AppendLine(string.Format("\tpublic {0} ()", ClassName));
                output.AppendLine("\t{");
                output.AppendLine("\t}");

                if (IncludeGetObjectDataMethod)
                {
                    // Create an instantiation method for deserialization.
                    StringDictionary MethodMap = new StringDictionary();
                    MethodMap.Add("bool", "GetBoolean");
                    MethodMap.Add("char", "GetChar");
                    MethodMap.Add("DateTime", "GetDateTime");
                    MethodMap.Add("decimal", "GetDecimal");
                    MethodMap.Add("double", "GetDouble");
                    MethodMap.Add("byte", "GetByte");
                    MethodMap.Add("sbyte", "GetSByte");
                    MethodMap.Add("short", "GetInt16");
                    MethodMap.Add("ushort", "GetUInt16");
                    MethodMap.Add("Int16", "GetInt16");
                    MethodMap.Add("UInt16", "GetUInt16");
                    MethodMap.Add("int", "GetInt32");
                    MethodMap.Add("uint", "GetUInt32");
                    MethodMap.Add("Int32", "GetInt32");
                    MethodMap.Add("UInt32", "GetUInt32");
                    MethodMap.Add("long", "GetInt64");
                    MethodMap.Add("ulong", "GetUInt64");
                    MethodMap.Add("Int64", "GetInt64");
                    MethodMap.Add("UInt64", "GetUInt64");
                    MethodMap.Add("float", "GetSingle");
                    MethodMap.Add("string", "GetString");

                    output.AppendLine();
                    output.AppendLine("\t/// &lt;summary&gt;");
                    output.AppendLine("\t/// Constructor for deserialization.");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    output.AppendLine("\t/// &lt;param name=\"info\"&gt;Provided by the serializer.&lt;/param&gt;");
                    output.AppendLine("\t/// &lt;param name=\"context\"&gt;Provided by the serializer.&lt;/param&gt;");
                    output.AppendLine("\t[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]");
                    output.AppendLine(string.Format("\tpublic {0} (SerializationInfo info, StreamingContext context)", ClassName));
                    output.AppendLine("\t{");
                    output.AppendLine("\t\t// base.GetObjectData(info, context);");
                    output.AppendLine();
                    output.AppendLine("\t\tif (info == null)");
                    output.AppendLine("\t\t{");
                    output.AppendLine("\t\t\tthrow new System.ArgumentNullException(\"Not a valid object\");");
                    output.AppendLine("\t\t}");
                    output.AppendLine();
                    for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                    {
                        if (MethodMap.ContainsKey(Property[Index][0]))
                        {
                            output.AppendLine(string.Format("\t\tthis._{1} = ({3}) info.{2}(\"{0}\");", Property[Index][1], LowerCaseFirstLetter(Property[Index][1]), MethodMap[Property[Index][0]], Property[Index][0]));
                        }
                        else
                        {
                            output.AppendLine(string.Format("\t\tthis._{1} = ({2}) info.GetValue(\"{0}\", typeof({2}));", Property[Index][1], LowerCaseFirstLetter(Property[Index][1]), Property[Index][0]));
                        }
                    }
                    output.AppendLine("\t}");
                }

                // Create an instantiation method with all the properties as parameters.
                output.AppendLine();
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine(string.Format("\t/// Initializes a new instance of the class &lt;see cref=\"{0}\"/&gt;, with all properties as parameters.", ClassName));
                output.AppendLine("\t/// &lt;/summary&gt;");
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine(string.Format("\t/// &lt;param name=\"{0}\"&gt;The value to assign to this property&lt;/param&gt;", Property[Index][1]));
                }
                output.Append(string.Format("\tpublic {0} (", ClassName));

                // Got all the definitions, so create the properties.
                string comma = string.Empty;
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.Append(string.Format("{0}{1} {2}", comma, Property[Index][0], LowerCaseFirstLetter(Property[Index][1])));
                    comma = ", ";
                }
                output.AppendLine(")");
                output.AppendLine("\t{");
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine(string.Format("\t\tthis._{0} = {1};", LowerCaseFirstLetter(Property[Index][1]), LowerCaseFirstLetter(Property[Index][1])));
                }
                output.AppendLine("\t}");

                // Create an instantiation method using an existing instance as the parameter.
                output.AppendLine();
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine(string.Format("\t/// Initializes a new instance of the class &lt;see cref=\"{0}\"/&gt;, using an existing instance as the parameter.", ClassName));
                output.AppendLine("\t/// &lt;/summary&gt;");
                output.AppendLine("\t/// &lt;param name=\"obj\"&gt;The existing instance source for the property values.&lt;/param&gt;");
                output.AppendLine(string.Format("\tpublic {0} ({0} obj)", ClassName));
                output.AppendLine("\t{");
                output.AppendLine("\t\tthis.Load (obj);");
                output.AppendLine("\t}");

                // Create an instantiation method with object[] as the parameter.
                output.AppendLine();
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine(string.Format("\t/// Initializes a new instance of the class &lt;see cref=\"{0}\"/&gt;, using an array of objects for the property values.", ClassName));
                output.AppendLine("\t/// &lt;/summary&gt;");
                output.AppendLine("\t/// &lt;param name=\"obj\"&gt;The property values in an object array, to assign ordinally.&lt;/param&gt;");
                output.AppendLine(string.Format("\tpublic {0} (IReadOnlyList&lt;object&gt; obj)", ClassName));
                output.AppendLine("\t{");
                int Index1 = 0;
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine(string.Format("\t\tthis._{0} = ({1}) obj[{2}];", LowerCaseFirstLetter(Property[Index][1]), Property[Index][0], Index1++));
                }
                output.AppendLine("\t}");

                // Create all public enumerations
                output.AppendLine();
                foreach (string enumName in EnumCollection.Keys)
                {
                    int valueIndex = 0;
                    output.AppendLine("\t/// &lt;summary&gt;");
                    output.AppendLine("\t/// List of values");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    output.AppendLine("\t" + enumName);
                    output.AppendLine("\t{");
                    foreach (string valueName in EnumCollection[enumName].Keys)
                    {
                        if (valueIndex &gt; 0)
                        {
                            output.AppendLine();
                        }
                        valueIndex++;
                        foreach (string typeName in EnumCollection[enumName][valueName].Keys)
                        {
                            if (typeName == "Comment" &amp;&amp; EnumCollection[enumName][valueName].ContainsKey(typeName))
                            {
                                foreach (string line in EnumCollection[enumName][valueName][typeName])
                                {
                                    output.AppendLine("\t\t" + line);
                                }
                            }
                            if (typeName == "Attribute" &amp;&amp; EnumCollection[enumName][valueName].ContainsKey(typeName))
                            {
                                foreach (string line in EnumCollection[enumName][valueName][typeName])
                                {
                                    output.AppendLine("\t\t" + line);
                                }
                            }
                        }
                        output.AppendLine("\t\t" + valueName);
                    }
                    output.AppendLine("\t}");
                    output.AppendLine();
                }

                // Create a load method to populate from an existing instance as the parameter.
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine(string.Format("\t/// Load the properties of this instance, from the properties of another instance of the class &lt;see cref=\"{0}\"/&gt;.", ClassName));
                output.AppendLine("\t/// &lt;/summary&gt;");
                output.AppendLine("\t/// &lt;param name=\"obj\"&gt;The existing object instance source for the property values.&lt;/param&gt;");
                output.AppendLine(string.Format("\tpublic void Load ({0} obj)", ClassName));
                output.AppendLine("\t{");
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine(string.Format("\t\tthis._{0} = obj.{1};", LowerCaseFirstLetter(Property[Index][1]), Property[Index][1]));
                }
                output.AppendLine("\t}");
                output.AppendLine();

                // Create a load method to populate from a KeyValuePair list. Alternate to optional parameters.
                output.AppendLine("\t/// &lt;summary&gt;");
                output.AppendLine("\t/// Load the properties of this instance, from a KeyValuePair collection.");
                output.AppendLine("\t/// &lt;/summary&gt;");
                output.AppendLine("\t/// &lt;param name=\"params\"&gt;The KeyValuePair collection for the property values.&lt;/param&gt;");
                output.AppendLine(string.Format("\tpublic void Load (List&lt;KeyValuePair&lt;string, object&gt;&gt; parms)", ClassName));
                output.AppendLine("\t{");
                output.AppendLine("\t\tforeach (KeyValuePair&lt;string, object&gt; item in parms)");
                output.AppendLine("\t\t{");
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine(string.Format("\t\t\t{0}if (string.Compare(item.Key, \"{1}\", false) == 0)",
                        Index &gt; 0 ? "else " : string.Empty,
                        Property[Index][1]));
                    output.AppendLine("\t\t\t{");
                    output.AppendLine(string.Format("\t\t\t\tthis._{0} = ({1}) item.Value;", LowerCaseFirstLetter(Property[Index][1]), Property[Index][0]));
                    if (Index &lt; Property.Keys.Count - 1)
                    {
                        output.AppendLine("\t\t\t}");
                    }
                }
                output.AppendLine("\t\t\t}");
                output.AppendLine("\t\t\telse");
                output.AppendLine("\t\t\t{");
                output.AppendLine("\t\t\t\tthrow new Exception(string.Format(\"{0} is not a property member of this class. The property is case sensitive.\", item.Key));");
                output.AppendLine("\t\t\t}");
                output.AppendLine("\t\t}");
                output.AppendLine("\t}");
                output.AppendLine();

                // Got all the definitions, so create the properties.
                for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                {
                    output.AppendLine("\t/// &lt;summary&gt;");
                    output.AppendLine("\t/// Gets or sets the value of this property.");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    if (Attribute.ContainsKey(Property[Index][1]))
                    {
                        foreach (string Line in Attribute[Property[Index][1]].Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries))
                        {
                            output.AppendLine(string.Format("\t{0}", Line));
                        }
                    }
                    output.AppendLine(string.Format("\tpublic {0} {1}", Property[Index][0], Property[Index][1]));
                    output.AppendLine("\t{");
                    output.AppendLine(string.Format("\t\tget {{ return this._{0}; }}", LowerCaseFirstLetter(Property[Index][1])));
                    output.AppendLine(string.Format("\t\tset {{ this._{0} = value; }}", LowerCaseFirstLetter(Property[Index][1])));
                    output.AppendLine("\t}");
                    output.AppendLine();
                }

                // For ICloneable, create the Clone() method to fulfill the interface requirement
                if (IncludeCloneMethod)
                {
                    output.AppendLine("\t/// &lt;summary&gt;");
                    output.AppendLine("\t/// Creates a new instance of this object with its property values.");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    output.AppendLine("\tpublic object Clone()");
                    output.AppendLine("\t{");
                    output.AppendLine(string.Format("\t\treturn new {0}(this);", ClassName));
                    output.AppendLine("\t}");
                    output.AppendLine();
                }

                // For ICloneable, create the CloneNew() method.  This is similar to Clone(),
                // but specific properties are excluded from the copy of the new object, forcing
                // the default in the cloned object.
                if (IncludeCloneMethod)
                {
                    output.AppendLine("\t/// &lt;summary&gt;");
                    output.AppendLine("\t/// Creates a new instance of this object with its property values.");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    output.AppendLine("\tpublic object CloneNew()");
                    output.AppendLine("\t{");
                    output.AppendLine("\t\treturn this.Clone();");
                    output.AppendLine("\t}");
                    output.AppendLine();
                }

                // For ISerializable, create the GetObjectData() method.
                if (IncludeGetObjectDataMethod)
                {
                    output.AppendLine("\t/// Serializable support method: returns the property values to a serialization client object.");
                    output.AppendLine("\t/// &lt;/summary&gt;");
                    output.AppendLine("\t/// &lt;param name=\"info\"&gt;Provided by the serializer.&lt;/param&gt;");
                    output.AppendLine("\t/// &lt;param name=\"context\"&gt;Provided by the serializer.&lt;/param&gt;");
                    output.AppendLine("\t[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]");
                    output.AppendLine("\tpublic virtual void GetObjectData(SerializationInfo info, StreamingContext context)");
                    output.AppendLine("\t{");
                    output.AppendLine("\t\t// base.GetObjectData(info, context);");
                    output.AppendLine();
                    output.AppendLine("\t\tif (info == null)");
                    output.AppendLine("\t\t{");
                    output.AppendLine("\t\t\tthrow new System.ArgumentNullException(\"Not a valid object\");");
                    output.AppendLine("\t\t}");
                    output.AppendLine();
                    for (int Index = 0; Index &lt; Property.Keys.Count; Index++)
                    {
                        output.AppendLine(string.Format("\t\tinfo.AddValue(\"{0}\", this._{1});", Property[Index][1], LowerCaseFirstLetter(Property[Index][1])));
                    }
                    output.AppendLine("\t}");
                }
                InDefinitions = false;
                CodeGenerationCompleted = true;
            }
            else if (InDefinitions &amp;&amp; !InEnumDef &amp;&amp; s.Length &gt; 0 &amp;&amp; s[s.Length - 1] == ';')  // A property definition
            {
                // A quirk: if generics are in use which require more than one argument, space parsing will not yield
                // the positions expected.  So, remove any spaces encloded by '&lt;' and '&gt;', including nested.
                string Fixed = PropertyLinePrep(s);
                string[] a = Fixed.Substring(0, Fixed.Length - 1).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                if (a.Length &lt; 2)
                {
                    output.AppendLine(string.Format("\t{0}", l));
                }
                else
                {
                    Property.Add(Property.Keys.Count, new string[] { a[0], a[1] });
                    StringBuilder AttributeLines = new StringBuilder();
                    foreach (string AttributeLine in AttributeHolder)
                    {
                        AttributeLines.AppendLine(AttributeLine);
                    }
                    Attribute.Add(a[1], AttributeLines.ToString());
                    AttributeHolder.Clear();

                    output.Append(string.Format("\tprivate {0} _{1}", a[0], LowerCaseFirstLetter(a[1])));
                    for (int i = 2; i &lt; a.Length; i++)
                    {
                        output.Append(string.Format(" {0}", a[i]));
                    }
                    output.AppendLine(";");
                }
            }
            else if (InDefinitions &amp;&amp; s.Length &gt; 0 &amp;&amp; s.IndexOf("[") == 0 &amp;&amp; s.LastIndexOf("]") == s.Length - 1)
            {
                // This is an attribute which must be placed above the public set/get declaration,
                // or the public enum declaration, as appropriate.
                if (InEnumDef)
                {
                    if (!EnumHolder.ContainsKey("Comment"))
                    {
                        EnumHolder.Add("Comment", new List&lt;string&gt;());
                    }
                    EnumHolder["Comment"].Add(s);
                }
                else
                {
                    AttributeHolder.Add(s);
                }
            }
            else if (InDefinitions &amp;&amp; InEnumDef &amp;&amp; s.Length &gt; 0 &amp;&amp; s.IndexOf("[") == 0 &amp;&amp; s.LastIndexOf("]") == s.Length - 1)
            {
                // This is an attribute which must be placed above the public set/get declaration,
                // or the public enum declaration, as appropriate.
                AttributeHolder.Add(s);
            }
            else if (InDefinitions &amp;&amp; s.Length &gt; 2 &amp;&amp; s.IndexOf("///") == 0)
            {
                // This is a public documentation marker, which must also be placed above 
                // the public set/get declaration, or the public enum declaration, 
                // as appropriate.
                if (InEnumDef)
                {
                    if (!EnumHolder.ContainsKey("Comment"))
                    {
                        EnumHolder.Add("Comment", new List&lt;string&gt;());
                    }
                    EnumHolder["Comment"].Add(s);
                }
                else
                {
                    AttributeHolder.Add(s);
                }
            }
            else if (InEnumDef)
            {
                if (s.Length &gt; 0)
                {
                    if (!EnumCollection.ContainsKey(thisEnumKey))
                    {
                        EnumCollection.Add(thisEnumKey, new Dictionary&lt;string, Dictionary&lt;string, List&lt;string&gt;&gt;&gt;());
                    }
                    if (!EnumCollection[thisEnumKey].ContainsKey(s))
                    {
                        EnumCollection[thisEnumKey].Add(s, new Dictionary&lt;string, List&lt;string&gt;&gt;(EnumHolder));
                    }
                    else
                    {
                        EnumCollection[thisEnumKey][s] = new Dictionary&lt;string, List&lt;string&gt;&gt;(EnumHolder);
                    }
                    EnumHolder = new Dictionary&lt;string, List&lt;string&gt;&gt;();
                }
            }
            else
            {
                output.AppendLine(string.Format(InDefinitions ? "\t{0}" : "{0}", s));
            }
        }
        output.AppendLine("}");
        return output.ToString();
    }

    private string PropertyLinePrep(string line)
    {
        StringBuilder result = new StringBuilder();
        int GenericNestingLevel = 0;
        bool HaveEqualSign = false;
        for (int Index = 0; Index &lt; line.Length; Index++)
        {
            string thisChar = line.Substring(Index, 1);
            if (thisChar == "=") HaveEqualSign = true;
            if (HaveEqualSign)
            {
                result.Append(thisChar);
                continue;
            }
            if (thisChar == "&lt;")
            {
                GenericNestingLevel++;
                result.Append(thisChar);
                continue;
            }
            if (thisChar == "&gt;")
            {
                GenericNestingLevel--;
                result.Append(thisChar);
                continue;
            }
            if (thisChar == " " &amp;&amp; GenericNestingLevel &gt; 0) continue;
            result.Append(thisChar);
        }
        return result.ToString();
    }
}</Script>
  <Language>1</Language>
  <TestData>[Serializable]
[DefaultPropertyAttribute("Description")]

class MyClass : ICloneable, ISerializable
{
        /// &lt;summary&gt;
        /// Public documentation for enum WatcherForm.
        /// &lt;summary&gt;
	public enum WatcherForm : byte { 
		mild, 
		medium, 
		paranoid
	}

        /// &lt;summary&gt;
        /// Public documentation for Sequence.
        /// &lt;summary&gt;
	[CategoryAttribute("Admin"), DisplayNameAttribute("Sequence"), DescriptionAttribute("Controls the sequence of placement."), ReadOnly(false)]
	int Sequence = 27;
	
	// A comment which should be tabbed in with the output.
        [CategoryAttribute("Admin"), DisplayNameAttribute("Display Items"), DescriptionAttribute("The collection of items to display."), ReadOnly(false)]
	[XmlAttribute ("second")]
	string[] DisplayItems = new string[] { "Test", "Stage", "Production" };
	
	[CategoryAttribute("Admin"), DisplayNameAttribute("Connection String"), DescriptionAttribute("The location of SQL, Access, MySQL or PostGre SQL."), ReadOnly(false)]
	string ConnectionString = "Server=localhost;Integrated Security=True;Initial Catalog=master";
	
	Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt; Special1;
	Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt; Special2 = new Dictionary&lt;int, Dictionary&lt;int, string&gt;&gt;();

	OtherClass.Special X;

	[XmlIgnore]
	OtherClass.Special Y;
	
        WatcherForm w = WatcherForm.paranoid;
}

public void Validate()
{
   // This is a method I do want added after the auto generated code.
}

private string ValidateAll()
{
   // This is another method I do want added after the auto generated code.
   return "Test";
}</TestData>
  <References>
    <string>System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</string>
  </References>
  <OtherReferences />
</ClipboardMungerScriptContainer>